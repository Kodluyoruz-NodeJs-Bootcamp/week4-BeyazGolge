-App.ts-
1- Create a connection to the mySql Server
2- Put middlewares
3- Arrange the routes

-User.ts-
1- Create a schema for the user entity

-Auth.ts-
1- Import the user schema
2- Assign token to a variable
3- Verify the token and get the userID
4- Look for the UserId in the database
5- If found, return next(),
6- Else send a message saying "You should register first"

-userRoute.ts-
1- Create routes for login, logout, register and dashboard

-userController.ts-
*-registerUser()-
1- Get the incoming form from the request object
2- Check if the email exists in the database
 - if exists send a message saying user already exists
 - Else :
 3- Check if the passwords match
  - If does not match send a message saying passwords dont match
  - Else:
  4- Create user using the form and schema
  5- Save the user to the database

*-loginUser()-
1- Try to get the token from the cookie,
 - If token is not empty send a message saying "You are already logged in"
 - Else:
 2- Try to find the email gotten from the request object in the database
  - If not found send a message saying "You should register first"
  - Else:
  3- Compare the password gotten from the request object with the found users password
   - If does not match send a message saying "Password is incorrect"
   - Else: 
    4- Generate a token and write it to the cookie,
    5- redirect user to the dashboard page

*-getDashboardPage()-
1- Pull all the users from the database,
2- Assign token to a varible,
3- Find user by token from the database,
4- Send users name and last name to the frontend

*-logoutUser()-
1- Check if the user is logged in
 -If not logged in send a message saying "You are not logged in"
 -Else:
 2- Write an empty token to the cookie,
 3- Redirect to index page
